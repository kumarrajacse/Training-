For your "Hello World" Maven project, you can write JUnit test cases to cover the basic functionality. Below is an example of a JUnit test class for your `HelloWorld` class:

### Step 1: Write JUnit Test Class

Create a new test class, let's call it `HelloWorldTest`, in the `src/test/java` directory:

```java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class HelloWorldTest {

    @Test
    public void testHelloWorld() {
        // Given
        HelloWorld helloWorld = new HelloWorld();

        // When
        String result = helloWorld.getGreeting();

        // Then
        assertEquals("Hello, World!", result);
    }
}
```

### Step 2: Modify HelloWorld Class

Modify your `HelloWorld` class to include a method that returns the greeting message. This allows you to test the functionality of your class.

```java
public class HelloWorld {
    
    public String getGreeting() {
        return "Hello, World!";
    }

    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

### Step 3: Update Maven POM

Ensure that your `pom.xml` has the necessary dependencies for JUnit:

```xml
<dependencies>
    <!-- ... other dependencies ... -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.1</version> <!-- Use the latest version -->
        <scope>test</scope>
    </dependency>
</dependencies>
```

### Step 4: Run the Tests

Now, you can run your tests using Maven. Open a terminal and navigate to your project directory. Run the following command:

```bash
mvn test
```

This command will compile your code, run the JUnit tests, and report the results.

### Optional Step: Verify Code Coverage with Jacoco

If you've set up Jacoco for code coverage as explained in a previous response, you can run the following command to generate the Jacoco coverage report:

```bash
mvn jacoco:report
```

Open the generated HTML report in the `target/site/jacoco` directory to see the code coverage results.

By following these steps, you have created a simple JUnit test for your "Hello World" program and can use it to ensure the correctness of your code. Keep in mind that in a real-world scenario, you would typically have more comprehensive tests covering various aspects of your application.
