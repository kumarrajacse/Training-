To set up Jacoco for code coverage in a Maven project with a simple "Hello World" program, follow these steps:

### Step 1: Update Your Maven POM file

Add the Jacoco Maven plugin to your `pom.xml`. Make sure to replace the version with the latest available version:

```xml
<build>
    <plugins>
        <!-- ... other plugins ... -->
        <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.8.7</version> <!-- Replace with the latest version -->
            <executions>
                <execution>
                    <id>default-prepare-agent</id>
                    <goals>
                        <goal>prepare-agent</goal>
                    </goals>
                </execution>
                <execution>
                    <id>default-report</id>
                    <phase>prepare-package</phase>
                    <goals>
                        <goal>report</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

### Step 2: Write Your "Hello World" Program

Create a simple "Hello World" class in the `src/main/java` directory. Let's name it `HelloWorld.java`:

```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

### Step 3: Build Your Maven Project

Open a terminal and navigate to your project directory. Run the following Maven command to build your project:

```bash
mvn clean install
```

### Step 4: Run Your Tests and Generate Jacoco Report

Run the following Maven command to execute your tests and generate the Jacoco coverage report:

```bash
mvn test
```

This will execute your tests and generate Jacoco coverage data.

### Step 5: View the Jacoco Report

You can find the Jacoco coverage report in the `target/site/jacoco` directory. Open the `index.html` file in a web browser to view the coverage report.

That's it! You've set up Jacoco for code coverage in your Maven project with a "Hello World" program. Remember that for more meaningful code coverage, you'd typically have a more extensive codebase with unit tests covering various scenarios.
